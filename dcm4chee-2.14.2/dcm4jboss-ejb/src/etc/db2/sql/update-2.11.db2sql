-- Update DB from dcm4chee-2.10.x to dcm4chee-2.11.x

CONNECT TO tiani;
SET CURRENT SCHEMA TIANI;

ALTER TABLE ae ADD pat_id_issuer VARCHAR(254),
               ADD ae_desc VARCHAR(254);

ALTER TABLE patient ADD pat_custom1 VARCHAR(254)
                    ADD pat_custom2 VARCHAR(254)
                    ADD pat_custom3 VARCHAR(254);

CREATE INDEX pat_custom1 ON patient(pat_custom1);
CREATE INDEX pat_custom2 ON patient(pat_custom2);
CREATE INDEX pat_custom3 ON patient(pat_custom3);

ALTER TABLE study ADD study_custom1 VARCHAR(254)
                  ADD study_custom2 VARCHAR(254)
                  ADD study_custom3 VARCHAR(254);

CREATE INDEX study_custom1 ON study(study_custom1);
CREATE INDEX study_custom2 ON study(study_custom2);
CREATE INDEX study_custom3 ON study(study_custom3);

ALTER TABLE series ADD body_part VARCHAR(254)
                   ADD laterality VARCHAR(254)
                   ADD series_desc VARCHAR(254)
                   ADD series_custom1 VARCHAR(254)
                   ADD series_custom2 VARCHAR(254)
                   ADD series_custom3 VARCHAR(254);

CREATE INDEX body_part ON series(body_part);
CREATE INDEX laterality ON series(laterality);
CREATE INDEX series_desc ON series(series_desc);
CREATE INDEX series_custom1 ON series(series_custom1);
CREATE INDEX series_custom2 ON series(series_custom2);
CREATE INDEX series_custom3 ON series(series_custom3);

ALTER TABLE instance ADD inst_custom1 VARCHAR(254)
                     ADD inst_custom2 VARCHAR(254)
                     ADD inst_custom3 VARCHAR(254);
CREATE INDEX inst_custom1 ON instance(inst_custom1);
CREATE INDEX inst_custom2 ON instance(inst_custom2);
CREATE INDEX inst_custom3 ON instance(inst_custom3);

CREATE TABLE verify_observer (
	pk              INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT verify_observer_pk PRIMARY KEY,
	instance_fk     INTEGER,
	verify_datetime TIMESTAMP,
	observer_name   VARCHAR(254),
	observer_i_name VARCHAR(254),
	observer_p_name VARCHAR(254),
FOREIGN KEY (instance_fk) REFERENCES instance(pk)
);
CREATE INDEX observer_inst_fk ON verify_observer(instance_fk);
CREATE INDEX verify_datetime ON verify_observer(verify_datetime);
CREATE INDEX observer_name ON verify_observer(observer_name);
CREATE INDEX observer_i_name ON verify_observer(observer_i_name);
CREATE INDEX observer_p_name ON verify_observer(observer_p_name);

GRANT ALL PRIVILEGES ON TABLE verify_observer TO USER tiani;

ALTER TABLE filesystem ADD fs_group_id VARCHAR(254) NOT NULL DEFAULT '';
ALTER TABLE filesystem ALTER fs_group_id DROP DEFAULT;
UPDATE filesystem SET fs_group_id='ONLINE_STORAGE' WHERE availability=0;
UPDATE filesystem SET fs_group_id='NEARLINE_STORAGE' WHERE availability=1;
CREATE INDEX fs_group_id ON filesystem(fs_group_id);

ALTER TABLE mwl_item ADD station_name VARCHAR(254);
CREATE INDEX mwl_station_name ON mwl_item (station_name);
DROP INDEX mwl_sps_id;
CREATE UNIQUE INDEX mwl_sps_id ON mwl_item (sps_id,req_proc_id);

CREATE TABLE other_pid (
	pk          	INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT other_pid_pk PRIMARY KEY,
	pat_id         	VARCHAR(254) NOT NULL,
	pat_id_issuer  	VARCHAR(254) NOT NULL
);
CREATE UNIQUE INDEX other_pat_id ON other_pid(pat_id, pat_id_issuer);

CREATE TABLE rel_pat_other_pid (
	patient_fk      INTEGER,
	other_pid_fk    INTEGER,
FOREIGN KEY (patient_fk) REFERENCES patient(pk),
FOREIGN KEY (other_pid_fk) REFERENCES other_pid(pk)
);
CREATE INDEX other_pid_pat_fk ON rel_pat_other_pid(patient_fk);
CREATE INDEX pat_other_pid_fk ON rel_pat_other_pid(other_pid_fk);

GRANT ALL PRIVILEGES ON TABLE other_pid TO USER tiani;
GRANT ALL PRIVILEGES ON TABLE rel_pat_other_pid TO USER tiani;

CREATE TABLE study_permission (
	pk              INTEGER GENERATED BY DEFAULT AS IDENTITY CONSTRAINT sty_permission_pk PRIMARY KEY,
	study_fk        INTEGER,
	action          VARCHAR(254) NOT NULL,
	roles           VARCHAR(254) NOT NULL,
	valid_from      TIMESTAMP NOT NULL,
	valid_until     TIMESTAMP NOT NULL,
FOREIGN KEY (study_fk) REFERENCES study(pk)
);
CREATE INDEX sty_perm_study_fk ON study_permission(study_fk);
CREATE INDEX sty_perm_action ON study_permission(action);
CREATE INDEX sty_perm_roles ON study_permission(roles);
CREATE INDEX sty_perm_from ON study_permission(valid_from);
CREATE INDEX sty_perm_until ON study_permission(valid_until);

GRANT ALL PRIVILEGES ON TABLE study_permission TO USER tiani;

-- convert cascaded merge relation to one direct relation:
-- repeat following statement, until no row is affected! 
UPDATE patient SET merge_fk = ( SELECT b.merge_fk FROM patient b WHERE patient.merge_fk = b.pk )
    WHERE EXISTS ( SELECT 1 FROM patient b WHERE patient.merge_fk = b.pk AND b.merge_fk IS NOT NULL);
